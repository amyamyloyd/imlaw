<context>

# Overview

This is a proof-of-concept (PoC) application that enables users to upload a government-issued PDF form, extract all interactive form fields, and visually map them to reusable database fields. It is designed for internal use by legal/technical staff working on immigration-related automation tools. The goal is to simplify the field mapping process between source PDF form fields and a centralized field schema used for automation.

# Core Features

* **PDF Upload & Form Field Extraction**

  * Reads a user-uploaded PDF and extracts all form field metadata.
  * Uses `pdfminer.six` and `pdfplumber` for high accuracy extraction.

* **Split View Interface (Form Field List + PDF Preview)**

  * Displays all extracted form fields in a list (non-editable).
  * Renders the uploaded PDF using a right-panel preview.
  * When a user selects a form field from the list, the corresponding field on the PDF is highlighted and scrolled into view.

* **Field Mapping and Metadata Assignment**

  * For each form field, the user can select:

    * **Persona** (e.g., application, beneficiary, employer)
    * **Domain** (e.g., name, immigration, office)
    * **Collection Field** from an existing set
    * Or define a **New Field** mapping
  * Local storage is used to cache \~700 tooltips and field metadata for performance.

* **Progress Saving and Analysis**

  * Users can save progress at any time.
  * Users can export a JSON file mapping all form fields to their final personas/domains/collection fields, including metadata.

# User Experience

* **User Personas**

  * Internal legal ops or tech staff responsible for setting up mappings.
* **Key Flows**

  * Upload → Extract → View Split Screen → Select Field → Assign Metadata → Save/Export JSON.
* **UI/UX Considerations**

  * Smooth PDF scrolling.
  * Clicking on field name highlights field in red.
  * Compact and professional look.
  * Prevent duplicate new fields from being added to the dropdown of existing mappings.

</context>

<PRD>

# Technical Architecture

* **System Components**

  * **Frontend**: React (Split-pane layout), PDF.js (for rendering and highlighting), localStorage (cache field metadata).
  * **Backend**: FastAPI (handles PDF uploads, field extraction, JSON export).
  * **PDF Parsing**: `pdfminer.six` and `pdfplumber` for field extraction.

* **Data Models**

  * `FormField`: { name, type, tooltip, page, coordinates }
  * `FieldMapping`: { formFieldName, persona, domain, collectionFieldName (or newFieldName) }

* **APIs and Integrations**

  * `/upload` — Upload PDF and return parsed fields.
  * `/save` — Persist mapping progress (if needed beyond localStorage).
  * `/analyze` — Return final JSON of all mappings.

* **Infrastructure Requirements**

  * Python backend (FastAPI)
  * React frontend with PDF.js integration
  * Local filesystem or temporary storage for uploaded PDFs

# Development Roadmap

### Phase 1: MVP

* Upload and parse PDF → return fields
* Frontend layout (split screen, field list, PDF preview)
* Selection → highlight + scroll to field
* Dropdowns for persona/domain/existing field
* Create new field mapping
* Save to localStorage
* Export full JSON mapping

### Phase 2: Enhancements

* PDF zoom and better field visualization
* Authenticated saving to backend
* Drag-and-drop or batch tagging of fields
* Dynamic tooltip previews
* Better diffing to validate duplicates in new vs. existing fields

# Logical Dependency Chain

1. PDF Upload + Field Extraction (Backend)
2. Split View UI (Frontend layout)
3. PDF.js Integration (rendering and field positioning)
4. Field highlight on selection (based on coordinates)
5. Dropdown integration and metadata assignment
6. Save to localStorage
7. JSON analysis/export

# Risks and Mitigations

* **Highlighting fields on PDF**

  * Risk: PDF.js rendering coordinates may not align easily
  * Mitigation: Normalize coordinates via bounding boxes using pdfplumber

* **Duplicate or incorrect mappings**

  * Risk: Users may create duplicates or omit fields
  * Mitigation: Client-side validations; exclude new fields from existing dropdown

* **Tooling performance**

  * Risk: Parsing PDFs with many fields may be slow
  * Mitigation: Limit field rendering in preview to visible page only

# Appendix

* **Personas List**:

  * application, beneficiary, employer, relative, parent, spouse, surgeon, attorney, interpreter, preparer

* **Domains List**:

  * name, address, immigration, medical, criminal, office, signature, ID

* **Existing Collection Fields**:

  * Given Name, Middle Name, Family Name, Alien Number, SSN, Passport, TravelDoc, Date of Birth, Port of Entry, City of Entry, Country of Birth, Email address, Employer Name, DayTime Phone Number, Mobile Number, Apt, Str, Flr Number, Street Address, City, State, Country, Nationality, Language

* **Field Metadata**:

  * Stored as: `{ name, tooltip, type, coordinates, page }`

</PRD>


